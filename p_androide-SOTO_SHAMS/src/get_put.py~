# fichier temporaire, code Ã  placer dans OctoPy.py sur le serveur

# imports

import datetime
import glob

# fonctions

# --- Put file(s) on Thymio(s) ---
	def do_put(self,args) :		
		if args :
			args = args.split(' ')
			if len(args) > 1 :
				src_path = args[0]
				dest_path=args[1]
				hosts = args[2:]
					
				dest = octoPYInstance.resolveAddresses(hosts)
				
				# expanding ~
				src_path=os.path.expanduser(src_path)
				
				# expanding *
				if src_path[-1]=="*":
					old_dir = os.path.dirname(os.path.realpath(__file__))
					os.chdir(src_path[:-1])
					src_path=glob.glob(src_path)
					os.chdir(old_dir)
				else :
					src_path=[src_path]
				
				if dest != None :
					for destIP in dest :
						scpcommand = ["/usr/bin/sshpass", "-p", PIPASSWORD, "scp","-r"] +src_path+ [PIUSERNAME + "@" + str(destIP) + ":" + dest_path]	
						proc = subprocess.Popen(scpcommand)
				else :
					octoPYInstance.logger.critical('No host found. Type \'help look\' for more infos.')
			else :
				octoPYInstance.logger.critical('Missing argument. Type \'help put\' for help.')
		else :
			octoPYInstance.logger.critical('Type \'help put\' for help.')		
				
	def help_put(self):
		print 'put <src_path> <dest_path> [hosts list]\n'+\
			 'Sends file(s) from the server to a specified list of hosts or all host saved in the hostnames table. This use scp.\n'+\
                 'Your current path on server is :\n'+os.path.dirname(os.path.realpath(__file__))


	# --- Get file(s) from Thymio(s)
	def do_get(self,args) :		
		if args :
			args = args.split(' ')
			if len(args) > 1 :
				src_path = args[0]
				dest_path=args[1]
				hosts = args[2:]
				delete=False
				
				# -d argument ?
				if len(hosts)>=1:
					if hosts[0]=="-r":
						delete=True
						hosts=hosts[1:]
				
				dest = octoPYInstance.resolveAddresses(hosts)
				
				# expanding ~
				dest_path=os.path.expanduser(dest_path)
				
				old_dir = os.path.dirname(os.path.realpath(__file__))
				
				now = datetime.datetime.now()
				now = now.strftime("%Y%m%d_%H%M%S")

				if dest != None :
					for destIP in dest :
						host_name = octoPYInstance.getHostnameFromIP(u'' + str(destIP))		
						subfolder = now +"_"+ host_name
						os.chdir(dest_path)
						os.mkdir(subfolder)
						os.chdir(old_dir)

						if delete:
							scpcommand = ["/usr/bin/sshpass", "-p", PIPASSWORD, "rsync","-aq", "--remove-source-files", PIUSERNAME + "@" + str(destIP) + ":" + src_path, dest_path+"/"+subfolder]
							proc=subprocess.Popen(scpcommand)
							proc.wait()
							subprocess.Popen(["/usr/bin/sshpass", "-p", PIPASSWORD,"ssh",  PIUSERNAME + "@" + str(destIP), "find", src_path, "-type d", "-delete"])
						else :
							scpcommand = ["/usr/bin/sshpass", "-p", PIPASSWORD, "rsync","-aq", PIUSERNAME + "@" + str(destIP) + ":" + src_path, dest_path+"/"+subfolder]
							subprocess.Popen(scpcommand)		
				else :
					octoPYInstance.logger.critical('No host found. Type \'help look\' for more infos.')
			else :
				octoPYInstance.logger.critical('Missing argument. Type \'help get\' for help.')
		else :
			octoPYInstance.logger.critical('Type \'help get\' for help.')		
				
	def help_get(self):
		print 'get <src_path> <dest_folder> [-r] [hosts list]\n'+\
			 'Sends file(s) from a specified list of hosts or all host saved in the hostnames table to the server. '+\
			 'Destination on server must be an existing folder so that subfolders for each host are created inside.\n'+\
			 'If \'-r\' is provided, successfully sent files will be removed from hosts.\n'+\
			 'Your current path on server is :\n'+os.path.dirname(os.path.realpath(__file__))
